// <auto-generated />
using System;
using BoardService.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BoardService.Infrastructure.Migrations
{
    [DbContext(typeof(BoardDbContext))]
    partial class BoardDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BoardService.Infrastructure.Database.Entities.BoardEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("board_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("boards");
                });

            modelBuilder.Entity("BoardService.Infrastructure.Database.Entities.BoardTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("BoardService.Infrastructure.Database.Entities.ExecutionStageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("stage_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BoardId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("board_id");

                    b.Property<int?>("MaxTasksCount")
                        .HasColumnType("integer")
                        .HasColumnName("max_tasks_count");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Queue")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("BoardService.Infrastructure.Database.Entities.SprintEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("sprint_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BoardId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("board_id");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_start");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("Sprints");
                });

            modelBuilder.Entity("BoardService.Infrastructure.Database.Entities.TaskEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("task_id");

                    b.Property<string>("BoardId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("board_id");

                    b.Property<int>("SprintId")
                        .HasColumnType("integer")
                        .HasColumnName("sprint_id");

                    b.Property<int?>("StageId")
                        .HasColumnType("integer")
                        .HasColumnName("stage_id");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("SprintId");

                    b.HasIndex("StageId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("BoardService.Infrastructure.Database.Entities.BoardEntity", b =>
                {
                    b.HasOne("BoardService.Infrastructure.Database.Entities.BoardTypeEntity", "Type")
                        .WithMany("Boards")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Type");
                });

            modelBuilder.Entity("BoardService.Infrastructure.Database.Entities.ExecutionStageEntity", b =>
                {
                    b.HasOne("BoardService.Infrastructure.Database.Entities.BoardEntity", "Board")
                        .WithMany("ExecutionStages")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("BoardService.Infrastructure.Database.Entities.SprintEntity", b =>
                {
                    b.HasOne("BoardService.Infrastructure.Database.Entities.BoardEntity", "Board")
                        .WithMany("Sprints")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Board");
                });

            modelBuilder.Entity("BoardService.Infrastructure.Database.Entities.TaskEntity", b =>
                {
                    b.HasOne("BoardService.Infrastructure.Database.Entities.BoardEntity", "Board")
                        .WithMany("Tasks")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BoardService.Infrastructure.Database.Entities.SprintEntity", "Sprint")
                        .WithMany("Tasks")
                        .HasForeignKey("SprintId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BoardService.Infrastructure.Database.Entities.ExecutionStageEntity", "ExecutionStage")
                        .WithMany("Tasks")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Board");

                    b.Navigation("ExecutionStage");

                    b.Navigation("Sprint");
                });

            modelBuilder.Entity("BoardService.Infrastructure.Database.Entities.BoardEntity", b =>
                {
                    b.Navigation("ExecutionStages");

                    b.Navigation("Sprints");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("BoardService.Infrastructure.Database.Entities.BoardTypeEntity", b =>
                {
                    b.Navigation("Boards");
                });

            modelBuilder.Entity("BoardService.Infrastructure.Database.Entities.ExecutionStageEntity", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("BoardService.Infrastructure.Database.Entities.SprintEntity", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
